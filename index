<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>De quelle couleur seront mes chatons ? — Trycoline’s</title>

<!-- Polices neutres (compat larges). Si tu veux tes polices All Round Gothic/Tumba, dis-moi et je les intègre. -->
<link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@700&family=Fredoka:wght@300;400;500;600&display=swap" rel="stylesheet">

<style>
  :root{
    /* Palette Trycoline’s */
    --page-bg:#ffffff;
    --frame-bg:#FAF3F7;     /* rose très doux */
    --frame-border:#D6B3E0; /* lilac pastel */
    --panel:#ffffff;
    --border:#e9defc;       /* lilac clair interne */
    --accent:#6b4ea3;       /* lilac soutenu */
    --accent-2:#d37fb2;     /* rose accent */
    --ink:#26233a;
    --muted:#6b6a75;
    --ok:#167f5d; --warn:#a56a00; --err:#7a2a2a;
    --radius:14px;
  }
  html,body{margin:0;padding:0;background:var(--page-bg);color:var(--ink)}
  body{font-family:"Fredoka",system-ui,-apple-system,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif; line-height:1.5; font-size:15px}

  /* Cadre global compact */
  .frame{
    max-width:980px; margin:18px auto; background:var(--frame-bg);
    border:2px solid var(--frame-border); border-radius:16px; padding:14px;
  }
  .wrap{max-width:940px; margin:0 auto}

  h1{font-family:"Dancing Script",cursive; font-size:2.1rem; margin:0 0 4px; color:var(--accent)}
  .subtitle{margin:0 0 12px; color:#87518a; font-size:0.98rem}

  /* Panneaux Père/Mère compacts */
  .panel{
    background:var(--panel); border:1px solid var(--border); border-radius:var(--radius);
    padding:12px; margin:10px 0;
  }
  .panel h2{font-size:1.05rem; margin:0 0 8px; color:var(--accent-2)}

  /* Lignes compactes */
  .row{display:flex; gap:10px; align-items:flex-start; flex-wrap:wrap}
  .col{flex:1 1 320px; min-width:260px}
  .group{margin:8px 0}
  .group label.block{display:block; font-weight:600; margin-bottom:4px; font-size:0.95rem}
  select{font:inherit; border:1px solid var(--border); border-radius:10px; padding:8px 10px; min-width:220px; background:#fff}
  .checks{display:flex; gap:8px; align-items:center; flex-wrap:wrap}
  .pill{display:flex; align-items:center; gap:6px; padding:6px 10px; border:1px solid var(--border); border-radius:999px; background:#fff; white-space:nowrap}
  .hint{font-size:.88rem; color:var(--muted); margin-top:4px}

  /* Résultats compacts */
  .out{background:#fff; border:1px solid var(--border); border-radius:var(--radius); padding:12px; margin:10px 0}
  .section{margin:6px 0 8px}
  .section h3{font-family:"Dancing Script",cursive; font-size:1.25rem; color:#7a5ab0; margin:4px 0}
  .tags{display:flex; flex-wrap:wrap; gap:6px; margin-top:4px}
  .tag{display:inline-block; padding:3px 8px; border-radius:999px; border:1px solid var(--border); background:#fff; font-size:.93rem}
  .ok{color:var(--ok)} .warn{color:var(--warn)} .muted{color:var(--muted)}

  /* Actions */
  .actions{display:flex; gap:8px; flex-wrap:wrap; margin:8px 0 2px}
  .btn{border:1px solid var(--accent); background:var(--accent); color:#fff; padding:8px 12px; border-radius:10px; cursor:pointer; font-size:0.95rem}
  .btn.secondary{background:#fff; color:#7a5ab0}
  .btn.ghost{background:#fff; color:#5a3b47; border-color:#eec6dc}

  /* Responsive (mobile -> colonne) */
  @media (max-width:640px){
    body{font-size:14px}
    .col{flex:1 1 100%; min-width:100%}
    select{min-width:unset; width:100%}
  }
</style>
</head>
<body>
<div class="frame">
  <div class="wrap">
    <h1>De quelle couleur seront mes chatons ?</h1>
    <p class="subtitle">Calculette génétique compacte — patrons, couleurs, tabby, porteurs et gène roux (M/F).</p>

    <!-- ===== PÈRE ===== -->
    <div class="panel" id="pere">
      <h2>Père</h2>

      <!-- Ligne compacte: Couleur + Porteurs -->
      <div class="row">
        <div class="col">
          <div class="group">
            <label for="pa_base" class="block">Couleur de base</label>
            <select id="pa_base">
              <option value="seal" selected>Seal</option>
              <option value="blue">Blue</option>
              <option value="chocolat">Chocolat</option>
              <option value="lilac">Lilac</option>
              <option value="cinnamon">Cinnamon</option>
              <option value="fawn">Fawn</option>
              <option value="roux">Roux</option>
              <option value="creme">Crème</option>
            </select>
          </div>
        </div>
        <div class="col">
          <div class="group">
            <label class="block">Porteurs (récessifs)</label>
            <div class="checks">
              <label class="pill"><input type="checkbox" class="pa-choco-port"> Choco (B b)</label>
              <label class="pill"><input type="checkbox" class="pa-cinn-port"> Cinna (B bl)</label>
              <label class="pill"><input type="checkbox" class="pa-dil-port"> Dilution (Dd)</label>
            </div>
          </div>
        </div>
      </div>

      <!-- Ligne compacte: Tabby + Patron -->
      <div class="row">
        <div class="col">
          <div class="group">
            <label for="pa_tabby" class="block">Tabby (lynx)</label>
            <select id="pa_tabby">
              <option value="non" selected>Non</option>
              <option value="oui">Oui</option>
              <option value="oui_porteur_non_tabby">Oui porteur non tabby</option>
            </select>
          </div>
        </div>
        <div class="col">
          <div class="group">
            <label for="pa_motif" class="block">Patron</label>
            <select id="pa_motif">
              <option value="" selected>— Sélectionner —</option>
              <option value="colourpoint">Colourpoint</option>
              <option value="mitted">Mitted</option>
              <option value="high_mitted">High Mitted</option>
              <option value="bicolore">Bicolore</option>
              <option value="mid_high_white">Mid High White</option>
              <option value="van_high_white">Van / High White</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- ===== MÈRE ===== -->
    <div class="panel" id="mere">
      <h2>Mère</h2>

      <!-- Ligne compacte: Couleur + Porteuses -->
      <div class="row">
        <div class="col">
          <div class="group">
            <label for="pb_base" class="block">Couleur de base</label>
            <select id="pb_base">
              <!-- Couleurs non rousses -->
              <option value="seal" selected>Seal</option>
              <option value="blue">Blue</option>
              <option value="chocolat">Chocolat</option>
              <option value="lilac">Lilac</option>
              <option value="cinnamon">Cinnamon</option>
              <option value="fawn">Fawn</option>
              <!-- Torties -->
              <option value="seal_tortie">Seal Tortie</option>
              <option value="blue_tortie">Blue Tortie</option>
              <option value="chocolat_tortie">Chocolat Tortie</option>
              <option value="lilac_tortie">Lilac Tortie</option>
              <option value="cinnamon_tortie">Cinnamon Tortie</option>
              <option value="fawn_tortie">Fawn Tortie</option>
              <!-- Rousse / Crème -->
              <option value="rousse">Rousse</option>
              <option value="creme">Crème</option>
            </select>
          </div>
        </div>
        <div class="col">
          <div class="group">
            <label class="block">Porteuses (récessifs)</label>
            <div class="checks">
              <label class="pill"><input type="checkbox" class="pb-choco-port"> Choco (B b)</label>
              <label class="pill"><input type="checkbox" class="pb-cinn-port"> Cinna (B bl)</label>
              <label class="pill"><input type="checkbox" class="pb-dil-port"> Dilution (Dd)</label>
            </div>
          </div>
        </div>
      </div>

      <!-- Ligne compacte: Tabby + Patron -->
      <div class="row">
        <div class="col">
          <div class="group">
            <label for="pb_tabby" class="block">Tabby (lynx)</label>
            <select id="pb_tabby">
              <option value="non" selected>Non</option>
              <option value="oui">Oui</option>
              <option value="oui_porteur_non_tabby">Oui porteur non tabby</option>
            </select>
          </div>
        </div>
        <div class="col">
          <div class="group">
            <label for="pb_motif" class="block">Patron</label>
            <select id="pb_motif">
              <option value="" selected>— Sélectionner —</option>
              <option value="colourpoint">Colourpoint</option>
              <option value="mitted">Mitted</option>
              <option value="high_mitted">High Mitted</option>
              <option value="bicolore">Bicolore</option>
              <option value="mid_high_white">Mid High White</option>
              <option value="van_high_white">Van / High White</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- Actions -->
    <div class="actions">
      <button class="btn" id="btn_calc">Prédire</button>
      <button class="btn secondary" id="btn_reset" type="button">Réinitialiser</button>
      <button class="btn ghost" id="btn_print" type="button">Imprimer</button>
    </div>
    <div id="formError" class="error" style="display:none"></div>

    <!-- Résultats -->
    <div class="out">
      <div class="section" id="r_patron"><h3>Patrons</h3><div class="tags" id="motif"></div></div>
      <div class="section" id="r_couleurs"><h3>Couleurs de base</h3><div class="tags" id="basecolors"></div></div>
      <div class="section" id="r_tabby"><h3>Tabby</h3><div class="tags" id="tabby"></div></div>
      <div class="section" id="r_recessifs"><h3>Récessifs (porteurs)</h3><div class="tags" id="recessifs"></div></div>
      <div class="section" id="r_roux"><h3>Roux / Tortie (répartition M/F)</h3><div class="tags" id="roux"></div></div>
    </div>
  </div>
</div>

<script>
/* ================== LOGIQUE GÉNÉTIQUE (compacte) ================== */

/* Utilitaires */
function setDisabled(el, disabled){
  el.disabled = disabled;
  el.parentElement.style.opacity = disabled ? 0.55 : 1;
  if(disabled) el.checked = false;
}
function renderTags(id, items){
  const el=document.getElementById(id);
  el.innerHTML = items && items.length ? items.map(x=>`<span class="tag ${x.cls||''}">${x.txt}</span>`).join('') : '<span class="tag muted">—</span>';
}

/* Désactivation contextuelle des porteurs selon la base (réduit erreurs) */
function syncBaseToCarriers(prefix){
  const base = document.getElementById(prefix+'_base').value;
  const choco = document.querySelector('.'+prefix+'-choco-port');
  const cinn  = document.querySelector('.'+prefix+'-cinn-port');
  const dil   = document.querySelector('.'+prefix+'-dil-port');

  // reset
  [choco, cinn, dil].forEach(el => setDisabled(el, false));

  // Catégories
  const isDiluted   = v => ['blue','lilac','fawn','creme','blue_tortie','lilac_tortie','fawn_tortie'].includes(v);
  const isChocoPh   = v => ['chocolat','chocolat_tortie','lilac','lilac_tortie'].includes(v);     // phénotype choco/lilac
  const isCinnaExpr = v => ['cinnamon','cinnamon_tortie','fawn','fawn_tortie'].includes(v);       // bl/bl exprimé
  const isCream     = v => v === 'creme';

  // dd exprimé -> pas "porteur dilution"
  if (isDiluted(base) || isCream(base)) setDisabled(dil, true);

  // bl/bl exprimé -> pas "porteur choco" ni "porteur cinnamon"
  if (isCinnaExpr(base)) { setDisabled(cinn, true); setDisabled(choco, true); return; }

  // phénotype chocolat/lilac : "porteur choco" inutile ; on laisse "porteur cinnamon" (b/bl possible)
  if (isChocoPh(base)) { setDisabled(choco, true); /* cinn reste actif */ }
}

/* Exclusivité choco vs cinna (évite double portage contradictoire) */
function lockExclusiveCarriers(prefix){
  const ch = document.querySelector('.'+prefix+'-choco-port');
  const ci = document.querySelector('.'+prefix+'-cinn-port');
  if(!ch || !ci) return;
  ch.addEventListener('change', () => { if (ch.checked) ci.checked = false; });
  ci.addEventListener('change', () => { if (ci.checked) ch.checked = false; });
}

/* Hook UI init */
['pa','pb'].forEach(p=>{
  document.getElementById(p+'_base').addEventListener('change', ()=>syncBaseToCarriers(p));
  syncBaseToCarriers(p); lockExclusiveCarriers(p);
});

/* Table des patrons (officielle, sans fallback) */
const P={COLOURPOINT:'colourpoint', MITTED:'mitted', HIGH_MITTED:'high_mitted', BICOLORE:'bicolore', MID_HIGH_WHITE:'mid_high_white', VAN:'van_high_white'};
const motifRuleMap={
  [`${P.COLOURPOINT}|${P.COLOURPOINT}`]: {'Colourpoint':100},
  [`${P.COLOURPOINT}|${P.MITTED}`]: {'Mitted':50,'Colourpoint':50},
  [`${P.COLOURPOINT}|${P.HIGH_MITTED}`]: {'Mitted':100},
  [`${P.COLOURPOINT}|${P.BICOLORE}`]: {'Colourpoint':50,'Bicolore':50},
  [`${P.COLOURPOINT}|${P.MID_HIGH_WHITE}`]: {'Bicolore':50,'Mitted':50},
  [`${P.COLOURPOINT}|${P.VAN}`]: {'Bicolore':100},

  [`${P.MITTED}|${P.COLOURPOINT}`]: {'Colourpoint':50,'Mitted':50},
  [`${P.MITTED}|${P.MITTED}`]: {'Mitted':50,'Colourpoint':25,'High Mitted':25},
  [`${P.MITTED}|${P.HIGH_MITTED}`]: {'Mitted':50,'High Mitted':50},
  [`${P.MITTED}|${P.BICOLORE}`]: {'Colourpoint':25,'Mitted':25,'Bicolore':25,'Mid High White':25},
  [`${P.MITTED}|${P.MID_HIGH_WHITE}`]: {'Mitted':25,'Bicolore':25,'High Mitted':25,'Mid High White':25},
  [`${P.MITTED}|${P.VAN}`]: {'Bicolore':50,'Mid High White':50},

  [`${P.HIGH_MITTED}|${P.COLOURPOINT}`]: {'Mitted':100},
  [`${P.HIGH_MITTED}|${P.MITTED}`]: {'Mitted':50,'High Mitted':50},
  [`${P.HIGH_MITTED}|${P.HIGH_MITTED}`]: {'High Mitted':100},
  [`${P.HIGH_MITTED}|${P.BICOLORE}`]: {'Mitted':50,'Mid High White':50},
  [`${P.HIGH_MITTED}|${P.MID_HIGH_WHITE}`]: {'High Mitted':50,'Mid High White':50},
  [`${P.HIGH_MITTED}|${P.VAN}`]: {'Mid High White':100},

  [`${P.BICOLORE}|${P.COLOURPOINT}`]: {'Colourpoint':50,'Bicolore':50},
  [`${P.BICOLORE}|${P.MITTED}`]: {'Colourpoint':25,'Mitted':25,'Bicolore':25,'Mid High White':25},
  [`${P.BICOLORE}|${P.HIGH_MITTED}`]: {'Mitted':50,'Mid High White':50},
  [`${P.BICOLORE}|${P.BICOLORE}`]: {'Colourpoint':25,'Bicolore':50,'Van/High White':25},
  [`${P.BICOLORE}|${P.MID_HIGH_WHITE}`]: {'Mitted':25,'Bicolore':25,'High Mitted':25,'Van/High White':25},
  [`${P.BICOLORE}|${P.VAN}`]: {'Bicolore':50,'Van/High White':50},

  [`${P.MID_HIGH_WHITE}|${P.COLOURPOINT}`]: {'Bicolore':50,'Mitted':50},
  [`${P.MID_HIGH_WHITE}|${P.MITTED}`]: {'Mitted':25,'Bicolore':25,'High Mitted':25,'Mid High White':25},
  [`${P.MID_HIGH_WHITE}|${P.HIGH_MITTED}`]: {'High Mitted':50,'Mid High White':50},
  [`${P.MID_HIGH_WHITE}|${P.BICOLORE}`]: {'Mitted':25,'Bicolore':25,'High Mitted':25,'Van/High White':25},
  [`${P.MID_HIGH_WHITE}|${P.MID_HIGH_WHITE}`]: {'High Mitted':50,'Mid High White':50},
  [`${P.MID_HIGH_WHITE}|${P.VAN}`]: {'Mid High White':50,'Van/High White':50},

  [`${P.VAN}|${P.COLOURPOINT}`]: {'Bicolore':100},
  [`${P.VAN}|${P.MITTED}`]: {'Mitted':50,'Mid High White':50},
  [`${P.VAN}|${P.HIGH_MITTED}`]: {'Mid High White':100},
  [`${P.VAN}|${P.BICOLORE}`]: {'Bicolore':50,'Van/High White':50},
  [`${P.VAN}|${P.MID_HIGH_WHITE}`]: {'Mid High White':50,'Van/High White':50},
  [`${P.VAN}|${P.VAN}`]: {'Van/High White':100}
};
function computeMotif(pa,pb){
  const key=`${pa}|${pb}`, alt=`${pb}|${pa}`;
  return motifRuleMap[key] || motifRuleMap[alt] || null;
}

/* Phénotype -> génotype (B/D) simplifié */
function baseToBDGenotype(base){
  const map={
    seal:{B:['B','B'],D:['D','D']},
    blue:{B:['B','B'],D:['d','d']},
    chocolat:{B:['b','b'],D:['D','D']},
    lilac:{B:['b','b'],D:['d','d']},
    cinnamon:{B:['bl','bl'],D:['D','D']},
    fawn:{B:['bl','bl'],D:['d','d']},

    /* Torties : base sous-jacente non rousse */
    seal_tortie:{B:['B','B'],D:['D','D']},
    blue_tortie:{B:['B','B'],D:['d','d']},
    chocolat_tortie:{B:['b','b'],D:['D','D']},
    lilac_tortie:{B:['b','b'],D:['d','d']},
    cinnamon_tortie:{B:['bl','bl'],D:['D','D']},
    fawn_tortie:{B:['bl','bl'],D:['d','d']},

    /* Roux/Crème/Rousse : on garde des allèles « neutres » pour B/D */
    roux:{B:['B','B'],D:['D','D']},
    creme:{B:['B','B'],D:['d','d']},
    rousse:{B:['B','B'],D:['D','D']},
  };
  return map[base] || map.seal;
}

/* Porteurs (UI) */
function carriersFromUI(prefix){
  return {
    choco: document.querySelector('.'+prefix+'-choco-port').checked,
    cinn:  document.querySelector('.'+prefix+'-cinn-port').checked,
    dil:   document.querySelector('.'+prefix+'-dil-port').checked
  };
}

/* Gamètes + croisements utilitaires */
function gametes(a1,a2){ return a1===a2?[[a1,1]]:[[a1,.5],[a2,.5]]; }
function cross(gA,gB){
  const m=new Map();
  gA.forEach(([a,pA])=>gB.forEach(([b,pB])=>{
    const k=[a,b].sort().join('/'); m.set(k,(m.get(k)||0)+pA*pB);
  }));
  return [...m.entries()].map(([k,p])=>[[...k.split('/')],p]);
}

/* Phénotype B-locus + dilution */
function phenotypeB(alleles){
  const set=new Set(alleles);
  if(set.has('B')) return 'Seal';
  if(set.has('b') && set.has('bl')) return 'Chocolat';
  if(alleles[0]==='b' && alleles[1]==='b') return 'Chocolat';
  return 'Cinnamon';
}
function applyDilution(base, d){
  const dd=(d[0]==='d' && d[1]==='d');
  if(!dd) return base;
  if(base==='Seal') return 'Blue';
  if(base==='Chocolat') return 'Lilac';
  if(base==='Cinnamon') return 'Fawn';
  return base;
}

/* Injection des porteurs (correctif b/b -> b/bl si porteur cinnamon) */
function injectB(B,car){
  let [x,y] = B;
  // porteur chocolat : B/B -> B/b
  if (car.choco) {
    if (x==='B' && y==='B') y='b';
  }
  // porteur cinnamon : B/B -> B/bl  |  b/b -> b/bl
  if (car.cinn) {
    if (x==='B' && y==='B') y='bl';
    else if (x==='b' && y==='b') y='bl';
  }
  return [x,y];
}
function injectD(D,car){
  let [x,y]=D;
  if(x==='D'&&y==='D' && car.dil) y='d';
  return [x,y];
}

/* Couleurs de base (hors gène O) */
function computeBaseColors(){
  const pa_base=document.getElementById('pa_base').value;
  const pb_base=document.getElementById('pb_base').value;
  const gA=baseToBDGenotype(pa_base);
  const gB=baseToBDGenotype(pb_base);

  const ca=carriersFromUI('pa'), cb=carriersFromUI('pb');

  const BA=injectB(gA.B,ca), DA=injectD(gA.D,ca);
  const BB=injectB(gB.B,cb), DB=injectD(gB.D,cb);

  const kidsB=cross(gametes(BA[0],BA[1]), gametes(BB[0],BB[1]));
  const kidsD=cross(gametes(DA[0],DA[1]), gametes(DB[0],DB[1]));

  const tally=new Map();
  kidsB.forEach(([b,pB])=>kidsD.forEach(([d,pD])=>{
    const base=phenotypeB(b); const col=applyDilution(base,d);
    tally.set(col,(tally.get(col)||0)+pB*pD);
  }));
  return [...tally.entries()].map(([c,p])=>({color:c,prob:Math.round(p*1000)/10})).sort((a,b)=>b.prob-a.prob);
}

/* Tabby (dominant) */
function computeTabby(paTabby,pbTabby){
  const geno=(v)=>v==='non'?'aa':(v==='oui'?'TT':'Ta');
  const gA=geno(paTabby), gB=geno(pbTabby), out=[];
  if(gA==='aa'&&gB==='aa') out.push({txt:'100% non tabby.',cls:'muted'});
  else if((gA==='TT'&&gB==='aa')||(gA==='aa'&&gB==='TT')) out.push({txt:'100% tabby.',cls:'ok'});
  else if((gA==='Ta'&&gB==='aa')||(gA==='aa'&&gB==='Ta')) out.push({txt:'≈ 50% tabby / 50% non tabby.',cls:''});
  else if((gA==='TT'&&gB==='Ta')||(gA==='Ta'&&gB==='TT')) out.push({txt:'100% tabby (≥ hétérozygotes).',cls:'ok'});
  else if(gA==='TT'&&gB==='TT') out.push({txt:'100% tabby (homozygotes).',cls:'ok'});
  else if(gA==='Ta'&&gB==='Ta') out.push({txt:'≈ 75% tabby / 25% non tabby.',cls:''});
  return out;
}

/* Portage récessifs : affichage simple */
function carriersOutcome(Acar,Bcar,nom){
  return [{txt: (Acar||Bcar)? `${nom}: ≈ 50% porteurs / 50% non porteurs.` : `${nom}: Non porteur attendu.`, cls: (Acar||Bcar)? '' : 'muted'}];
}

/* Gène O (Roux/Tortie) dérivé des menus — bug corrigé */
function maleOState(){
  const b=document.getElementById('pa_base').value;
  return (b==='roux'||b==='creme') ? 'O' : 'o';
}
function femaleOState(){
  const b=document.getElementById('pb_base').value;
  if(b.endsWith('_tortie')) return 'Oo';
  if(b==='rousse' || b==='creme') return 'OO';
  return 'oo';
}
function computeRouxExplicitFromBase(){
  const m = maleOState();
  const f = femaleOState();
  let males = '', females = '';
  if(m==='O' && f==='oo'){ males='0% roux / 100% non roux'; females='100% torties'; }
  else if(m==='O' && f==='Oo'){ males='50% roux / 50% non roux'; females='50% rousses / 50% torties'; }
  else if(m==='O' && f==='OO'){ males='100% roux'; females='100% rousses'; }
  else if(m==='o' && f==='oo'){ males='0% roux'; females='0% rousses/torties'; }
  else if(m==='o' && f==='Oo'){ males='50% roux / 50% non roux'; females='50% torties / 50% non rousses'; }
  else if(m==='o' && f==='OO'){ males='100% roux'; females='100% torties'; }
  return [{txt:`Mâles : ${males}`},{txt:`Femelles : ${females}`}];
}

/* Calcul global */
function onCalculate(){
  const pa=document.getElementById('pa_motif').value;
  const pb=document.getElementById('pb_motif').value;
  const err=document.getElementById('formError');
  if(!pa || !pb){
    err.textContent='Sélectionne un patron pour chaque parent.'; err.style.display='block';
  }else{
    err.style.display='none';
  }

  const dist = (pa && pb) ? computeMotif(pa,pb) : null;
  const motifItems = dist ? Object.entries(dist).map(([k,v])=>({txt:`${k}: ${v}%`})) : [{txt:'—',cls:'muted'}];
  renderTags('motif', motifItems);

  const colors=computeBaseColors();
  renderTags('basecolors', colors.map(c=>({txt:`${c.color}: ${c.prob}%`})) );

  renderTags('tabby', computeTabby(
    document.getElementById('pa_tabby').value,
    document.getElementById('pb_tabby').value
  ));

  const ca=carriersFromUI('pa'), cb=carriersFromUI('pb');
  let rec=[];
  rec.push(...carriersOutcome(ca.choco, cb.choco, 'Chocolat'));
  rec.push(...carriersOutcome(ca.cinn,  cb.cinn,  'Cinnamon'));
  rec.push(...carriersOutcome(ca.dil,   cb.dil,   'Dilution'));
  renderTags('recessifs', rec);

  renderTags('roux', computeRouxExplicitFromBase());
}

/* Boutons */
document.getElementById('btn_calc').addEventListener('click', onCalculate);
document.getElementById('btn_reset').addEventListener('click', ()=>{
  document.querySelectorAll('input[type="checkbox"]').forEach(cb=>{ cb.checked=false; cb.disabled=false; cb.parentElement.style.opacity=1; });
  document.getElementById('pa_base').value='seal'; document.getElementById('pb_base').value='seal';
  document.getElementById('pa_tabby').value='non'; document.getElementById('pb_tabby').value='non';
  document.getElementById('pa_motif').value=''; document.getElementById('pb_motif').value='';
  ['motif','basecolors','tabby','recessifs','roux'].forEach(id=>document.getElementById(id).innerHTML='');
  document.getElementById('formError').style.display='none';
  syncBaseToCarriers('pa'); syncBaseToCarriers('pb');
});
document.getElementById('btn_print').addEventListener('click', ()=>window.print());

/* Premier rendu */
onCalculate();
</script>
</body>
</html>
